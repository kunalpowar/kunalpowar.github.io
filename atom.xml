<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[This and That]]></title>
  <link href="http://kunalpowar.github.io/atom.xml" rel="self"/>
  <link href="http://kunalpowar.github.io/"/>
  <updated>2015-03-01T02:09:03+05:30</updated>
  <id>http://kunalpowar.github.io/</id>
  <author>
    <name><![CDATA[Kunal Powar]]></name>
    <email><![CDATA[kunalpowar1203@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stargazing?]]></title>
    <link href="http://kunalpowar.github.io/blog/2015/02/28/stargazing/"/>
    <updated>2015-02-28T19:05:22+05:30</updated>
    <id>http://kunalpowar.github.io/blog/2015/02/28/stargazing</id>
    <content type="html"><![CDATA[<h2>&ldquo;I Like Stargazing&rdquo;</h2>

<p><em>So you are basically a huge follower of Hollywood stars?</em><br/>
<em>Whoa it sounds so cool? what exactly do you do?</em><br/>
<em>Is that really a hobby?</em></p>

<p>These are the kind of thoughts people have when i say that am a Stargazer. Well the second thought is not quite wrong! But no no no and no a 1000 more times. Its got nothing to do with the entertainment industry!!! Then what exactly is Stargazing?</p>

<p>Have you ever been in a situation where you are away from city and you see that the night sky is just brilliantly littered with stars when compared to city skies and you just cant help but stop whatever you were doing and just stare and stare at it. Everyone has does this. So is everyone a Stargazer?</p>

<p>No. It takes more than just watching the skies. You&rsquo;ve to know and understand it. Anyone would say that night sky is just a myriad of stars. But there&rsquo;s definitely more to it. The sky has many interesting objects like comets, planets, galaxies, nebulae, star clusters etc. As a Stargazer, one not only knows what these are, but will also be able to point out a few if the current sky has it. A lot of these objects are visible to naked eye. The <a href="http://en.wikipedia.org/wiki/Messier_object">Messier Catalog</a> is collection of over hundred interesting objects, many of which can be seen by using a Binocular.<br/>
<strong><em>Yes a Binocular!</em></strong></p>

<h3>How do you start with Stargazing?</h3>

<p>At first, start by just looking up at the night sky (Not while crossing the street please. I learned it the hard way.) As a city dweller, i have to be honest that the view is not what you expect. Thanks to all the city lights and pollution. Its much much better on the outskirts. Use a software like <a href="http://www.stellarium.org/">Stellarium</a> to understand the sky you see.</p>

<p><img src="http://kunalpowar.github.io/images/stellarium.png" title="Screen shot of the Stellarium App" alt="Screen shot of Stellarium app" />
<em>Screen shot of the Stellarium App</em></p>

<p>This tool will help you in identifying constellations. One might argue why knowing constellations is important? Constellations are your guide to all the interesting objects in the sky. Lets say i want to spot orion nebula with my binocular. I&rsquo;ll first spot the Orion constellation and then I&rsquo;ll know where exactly is the nebula as shown below.</p>

<p><img src="http://kunalpowar.github.io/images/orion_position.png" title="position of orion nebula with respect to orion constellation" alt="orion_position" />
<em>position of orion nebula with respect to orion constellation</em></p>

<p>Interesting fact, if you are able to spot Sagittarius, you are looking in the direction of the <strong>center of our galaxy</strong>.</p>

<h3>Binocular Astronomy</h3>

<p>Try spotting as many constellations as you can remember, along with few interesting objects in and around them. This takes a lot of practice and patience. Once you are comfortable with the sky and tools like stellarium, its time for gifting yourself a Binocular. Yes its a bit of an investment, but if you really love the sky, this doesn&rsquo;t matter (or just remind about your upcoming birthday to your friends.) The one below is is what i have. Its a <a href="http://www.celestron.com/browse-shop/astronomy/astronomy-binoculars/skymaster-15x70-binocular">Celestron 15X70</a>.</p>

<p><img src="http://kunalpowar.github.io/images/binocular.jpg" alt="Celestron 15X70" />
<em><a href="http://www.celestron.com/browse-shop/astronomy/astronomy-binoculars/skymaster-15x70-binocular">Celestron 15X70</a>.</em></p>

<p>You would want to start with something like this or even a 10X50 would do if you are looking for cheaper alternative. See that the binocular has large objective lens so that it collects more light, and the optics are of good quality. How can a small binocular with limited zoom possibly show faint objects in night sky? Trust me when i say this. It&rsquo;ll surprise you. Just point your binocular to an otherwise dark star less spot in the sky and you&rsquo;ll see hundreds of stars there. This is possible as the binocular has a large objective and there are two of those, thus collecting a lot of light. The orion nebula will not look like a star anymore. You&rsquo;ll see a faint cloud instead. Lots of <a href="http://en.wikipedia.org/wiki/Globular_cluster">Globular Clusters</a> start becoming visible. And then there&rsquo;s the moon. The craters are sharper and you can almost see the surface features. Please don&rsquo;t expect Hubble like images from your poor small limited power binocular.</p>

<h3>Telescopes</h3>

<p>Once you feel that you&rsquo;ve done enough binocular astronomy, you can move over to higher magnification. Meaning, its time to get a Telescope. I wouldn&rsquo;t be the best person to talk about these as don&rsquo;t own one. But I&rsquo;ll try stating facts I&rsquo;ve known from people who do. Telescopes give you the power to see individual objects at much larger magnification (>50x). You&rsquo;ll be able to spot and see few galaxies with high <a href="http://en.wikipedia.org/wiki/Surface_brightness">surface brightness</a>. Telescopes come in two major variants, Refractive and Reflective. The Refractive telescopes use complex system of lenses, and the latter uses a paraboloid mirror. Eyepieces as available as separate attachments to allow multiple zoom options. Also they allow you to attach a camera for Astro-Photography. Few points before you&rsquo;d go for a telescope.</p>

<ul>
<li>Start with a low magnitude one. Theres a learning curve involved in pointing to a object of interest in the sky. Takes lot of tries and <em>Patience</em>.</li>
<li>Many objects are very very faint. You need to use a technique called <a href="http://en.wikipedia.org/wiki/Averted_vision">Averted vision</a> to be able to see these objects.</li>
<li>The color receptors of our eyes called as <a href="http://en.wikipedia.org/wiki/Cone_cell">Cones</a> are inactive in low light. So the images you&rsquo;d see through a telescope&rsquo;s eyepiece will be Grayscale.</li>
<li>Reflectors are cheaper and compact compared to refractors.</li>
<li>The image you are focusing on will move out of the view because of earth&rsquo;s rotation. And this increases with higher magnification. The solution is to get a mount with <a href="http://www.celestron.com/browse-shop/astronomy/telescopes/skyprodigy-130-computerized-telescope">Auto tracker</a></li>
</ul>


<h3>Astro-Photography</h3>

<p>Astro-Photography is one more interesting hobby to start if you are a StarGazer. But this is a costly one. You need really good DSLRs with wide angle lenses for sky photography. For capturing individual objects, you need a Telescope + Camera combo. Although this did not stop me from trying to see what a simple point and shoot will do. And the results were not bad at all. I basically made all settings possible for taking snaps in dark conditions and kept it on terrace floor point straight up. Below are few of the snaps.</p>

<p><img src="http://kunalpowar.github.io/images/pointAndShoot1.jpg" alt="Point And Shoot Image 1" />
<em>Part of Taurus constellation. The bright object is Jupiter</em></p>

<p><img src="http://kunalpowar.github.io/images/pointAndShoot2.jpg" alt="Point And Shoot Image 2" />
<em>The Orion constellation</em></p>

<p>Most DSLRs have an option to expose the sensor towards the object for custom durations. This allows the sensor to capture more light, thus producing a image with lot more stars than what a point and shoot will do. If you point a sensor towards a night sky for elongated durations, it&rsquo;ll be able to capture lot of stars, but thanks to earth&rsquo;s rotation, their position on the sensor would have moved. This results in what&rsquo;s called star trails. Below is a star trails image i captured using a friend&rsquo;s DSLR. For this i captured 22 images each exposed for 30 seconds and stacked them using a software. (One continuous shot will add lot of noise in the image.)</p>

<p><img src="http://kunalpowar.github.io/images/starTrails.jpg" alt="Star Trail Image" />
<em>Camera Credits: <a href="http://kidoman.io/">Karan</a></em></p>

<p>A shorter exposure of really good starry sky also produces amazing pictures. I captured this one at the peak of a trekking location. Being far far away from city lights and pollution, this place had a really good night sky.</p>

<p><img src="http://kunalpowar.github.io/images/starrySky.jpg" alt="Starry Sky Image" />
<em>Camera Credits: Sachin Nayak</em></p>

<h3>Communities and Star Parties</h3>

<p>Apart from all these, try joining local groups or communities interested in the same. I got a lot of help from <a href="http://bas.org.in/">Bangalore Astronomical Society</a> which organized lots of star parties. This is where my real interest in star gazing grew. I am sure that every city will have one such group. If not, its not really hard to start one.</p>

<p><img src="http://kunalpowar.github.io/images/starParty.jpg" alt="At my first star party" />
<em>My first star party (dont miss the monstorus 12&#8221; reflector)</em></p>

<p>I hope this inspires more people to start StarGazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPI With EMBD]]></title>
    <link href="http://kunalpowar.github.io/blog/2014/05/22/spi-with-embd/"/>
    <updated>2014-05-22T09:52:03+05:30</updated>
    <id>http://kunalpowar.github.io/blog/2014/05/22/spi-with-embd</id>
    <content type="html"><![CDATA[<p>Once the mcp3008(a spi enabled 10-bit 8 channel ADC) was lost and found amoung our huge hardware heap i quickly started thinking about how to implement SPI in golang and include it as the next communicaton protocol supported under <a href="http://embd.kidoman.io">EMBD</a>. I looked through the existing implementations for the same, so that the users wont be alien to the end-points the library would provide. There was one  interesting problem at hand. EMBD is written to support multiple boards. The core functionality of SPI remains same for all the linux based ones. But in case of beaglebone, one extra step had to be done. SPI is not enabled by default in a bbb. And we dont want users to load the specific dtc everytime it boots up. So the library itself has to handle initializing SPI behind the scenes. Does this mean that i need to write separate files with essentially the same code for bbb and rpi (currently supported boards)..? In the world of clean and DRY style of coding, that would be a horrendous crime. So after a long thought this came out as a viable solution. Every host simply tells the generic spi driver if anything has to be done before the core spi features are available. In this case bbb sends a initializer function to the driver and rpi sends nil. Once the SPI core was ready, writing a package for mcp3008 was a piece of cake, thanks to the awesomely detailed datasheet.</p>

<h3>Sample</h3>

<p>The following sample uses the mcp3008 package to get 10 bit Digital value of the analog input at 0th channel via SPI.</p>

<blockquote><p>This works <strong>without any code change</strong> on both beaglebone black and raspberypi</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/kidoman/embd&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/kidoman/embd/convertors/mcp3008&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;github.com/kidoman/embd/host/all&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">channel</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">speed</span>   <span class="p">=</span> <span class="mi">1000000</span>
</span><span class='line'>  <span class="nx">bpw</span>     <span class="p">=</span> <span class="mi">8</span>
</span><span class='line'>  <span class="nx">delay</span>   <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;this is a sample code for mcp3008 10bit 8 channel ADC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">InitSPI</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">CloseSPI</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spiBus</span> <span class="o">:=</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">NewSPIBus</span><span class="p">(</span><span class="nx">embd</span><span class="p">.</span><span class="nx">SPIMode0</span><span class="p">,</span> <span class="nx">channel</span><span class="p">,</span> <span class="nx">speed</span><span class="p">,</span> <span class="nx">bpw</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">spiBus</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">adc</span> <span class="o">:=</span> <span class="nx">mcp3008</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">mcp3008</span><span class="p">.</span><span class="nx">SingleMode</span><span class="p">,</span> <span class="nx">spiBus</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">val</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">adc</span><span class="p">.</span><span class="nx">AnalogValueAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;analog value is: %v\n&quot;</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TODOs</h3>

<ul>
<li>Cover all the modes for SPI</li>
<li>Provide support for the differential mode of operation for mcp3008</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World With EMBD]]></title>
    <link href="http://kunalpowar.github.io/blog/2014/05/19/hello-world-with-embd/"/>
    <updated>2014-05-19T17:27:17+05:30</updated>
    <id>http://kunalpowar.github.io/blog/2014/05/19/hello-world-with-embd</id>
    <content type="html"><![CDATA[<h3>A Little Story</h3>

<p>Here we are, one of the usual night outs, hacking on a raspberry pi to get it working towards <a href="http://kidoman.io/engineering/thebot.html">the bot</a> idea. Started with one blinking led and then 4. Why 4? We thought if we are able to control 4 leds, then we can expand it to a 4wire parallel communication based on sending nibbles of data. With the poor pi giving us just 9 usable GPIO&rsquo;s this became a big problem. How do we interface those 10s of sensors? In comes I2C, a well-known hardware communication protocol, which uses just two wires and can talk to 128 individual devices. Now we didn&rsquo;t have an appetite to use existing C or python based libraries to talk I2C. Instead we wanted to write our own in golang. To get us started we got hold of an incomplete implementation of the protocol written in golang, which we picked up and started developing on. Thus came our first library solely containing I2C implementation. The trend continued by writing more and more such libraries right from the basic GPIO operations to interfacing with various sensors available in the market. As theoretically predicted, few of the libraries worked without any code change on beagle bone, another awesome prototyping board based on Linux.  After this, many &ldquo;nights&rdquo; were spent to make the library smart enough to work on any Linux based prototyping boards without any code change.  Thus was born the superheroic framework &ldquo;EMBD&rdquo;.</p>

<p>To get you started with EMBD, lets cook up a famous &ldquo;hello world&rdquo; (of the hardware world) recipe.</p>

<h3>Ingredients Required</h3>

<ul>
<li>1 EMBD</li>
<li>1 led</li>
<li>1 Raspberry pi</li>
<li>Few wires</li>
<li>Breadboard</li>
<li>Fire extinguisher (incase you decide to short the + and -)</li>
<li>1 Sublime Text Editor (personal favorite)</li>
</ul>


<p>At the end of the article is a video depicting the complete process. But i&rsquo;d recommend to read through before jumping to it. I&rsquo;ll not be talking much about the language itself here, but you can refer this to get you started with golang. One of the most compelling reasons for choosing golang for EMBD was its cross compatibility. ARM being one of the fully supported architectures, it suits well for most of the prototyping boards. Meaning you can code on any golang development friendly machine and then build for any target. Follow the instructions here to setup golang on your machine.
The all important hardware setup
Before you start with coding, lets see how to setup the hardware. In any project where you use a prototype board, its a good practice to keep the board and the external circuit separate. So we&rsquo;ll be using a breadboard to connect our led to the pi. Might seem like an overkill, but its &ldquo;good practice&rdquo;. Fix the led on the breadboard and before you do so make a note of the -ve and +ve terminals. (How you ask? the longer of the leads is +ve). Connect the -ve side to ground pin(3rd from top right on the pin header), and the +ve to the 4th pin from top left of the pin header. This is pin 4, which will be driving the led. Now power up your pi (via USB or external source), and get an ssh access to it on your host machine.</p>

<h3>Some Electronics</h3>

<p>At the core of the pi lies a ARM11 processor. But the processor alone does not provide many peripherals which are a must for any prototyping board. This is done using BCM2835 ARM Peripherals chip. It provides all the awesome features like SPI, I2C, GPIO, HDMI, USB etc. We&rsquo;ll be using the GPIO feature here. What&rsquo;s GPIO?  General Purpose Input Output. Simply put, it exposes certain pins on the board whose behavior can be controlled. Behaviors like the pin acting as an output and giving +3.3V(logic high) or 0V(logic low) the voltages vary according to boards.</p>

<p>This example tries to light up a led (light emitting diode) connected to a pin on raspberry pi. What does it take to light up led&rsquo;s?&hellip;. a lil EMBD flare..</p>

<h3>Lets code&hellip;</h3>

<p>Create a led_blink.go file and copy the code as shown below. I&rsquo;d recommend using Sublime Text + GoSublime package.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/kidoman/embd&quot;</span>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;github.com/kidoman/embd/host/rpi&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">InitGPIO</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">CloseGPIO</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ledPinNum</span> <span class="o">:=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">led</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">embd</span><span class="p">.</span><span class="nx">NewDigitalPin</span><span class="p">(</span><span class="nx">ledPinNum</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">led</span><span class="p">.</span><span class="nx">SetDirection</span><span class="p">(</span><span class="nx">embd</span><span class="p">.</span><span class="nx">Out</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">led</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;setting led at %v to high\n&quot;</span><span class="p">,</span> <span class="nx">ledPinNum</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">led</span><span class="p">.</span><span class="nx">Write</span><span class="p">(</span><span class="nx">embd</span><span class="p">.</span><span class="nx">High</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;setting led at %v to low\n&quot;</span><span class="p">,</span> <span class="nx">ledPinNum</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">led</span><span class="p">.</span><span class="nx">Write</span><span class="p">(</span><span class="nx">embd</span><span class="p">.</span><span class="nx">Low</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Al right, we have the code. Lets see what it does in more detail.</p>

<p>Here all the necessary packages are imported, embd being the most important. embd also provides packages for hosts like rpi and bbb. In this example we import the rpi package. The underscore tells go to import this even though its not directly used in the code.</p>

<h4><em>embd.InitGPIO()</em></h4>

<p>This tries to get the board info. Why you ask? EMBD supports multiple prototyping platforms. The same code can work on a different LINUX based boards like radxa, beagle bone etc.  The board info is then used to access the corresponding drivers for GPIO control</p>

<h4><em>embd.CloseGPIO()</em></h4>

<p>This command handles the very important clean up once the program exits.</p>

<h4><em>embd.NewDigitalPin(ledPInNum)</em></h4>

<p>This is where all the magic happens. In LINUX everything is a file or dir. And so is a pin. This command uses a gpio exporter to access a directory (/sys/class/gpio/gpio4 in this case). This directory corresponds to the physical pin on the board, and has various files for supported pin functionalities. It returns an interface (led in this case) which has methods to control the behavior of the pin. It returns an error if any.</p>

<h4><em>led.SetDirection(embd.Out)</em></h4>

<p>This is one of the functions implemented by &ldquo;led&rdquo; interface that sets up the pin to be a output or input. <em><strong>embd.Out</strong></em> is used when you want to drive anything connected to the pin (led in this case), and <em><strong>embd.In</strong></em> is used when the input has to be read (eg: reading a switch state).</p>

<h4><em>led.Write(embd.High) / led.Write(embd.Low)</em></h4>

<p>This functions writes 1 or 0 to the value file within the pin&rsquo;s directory. This results in the corresponding pin giving a HIGH (3.3V) or 0V output respectively. <em><strong>embd.High</strong></em> and <em><strong>embd.Low</strong></em> are a types referring to 1 and 0 respectively.</p>

<p>Now that you know what is happening, lets build the code so that our awaiting led gets its deserved light. As mentioned earlier, go supports cross compiling. A Raspberry pi has ARM architecture and LINUX os, both supported by golang. To build a executable you need to set the variables GOARCH and GOOS on your terminal as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">GOARCH</span><span class="o">=</span>arm <span class="nv">GOOS</span><span class="o">=</span>linux go build led_blink.go
</span></code></pre></td></tr></table></div></figure>


<p>This should dump a led_blink executable in the same directory as the code. scp this executable onto your raspberry pi and run it as sudo user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp led_blink pi@&lt;ip&gt;:~
</span><span class='line'>sudo ./led_blink
</span></code></pre></td></tr></table></div></figure>


<p>Voila..!!!!! The led springs up to life blinking every second. There&rsquo;s your  first ever implementation of embedded programming using EMBD.</p>

<div class="embed-video-container"><iframe src="//player.vimeo.com/video/93421433"></iframe></div>


<h3>What&rsquo;s Next..??</h3>

<p>Take further look at EMBD, and find more exciting samples to experiment on. What do you know&hellip;? One day you might be writing a new feature yourself and send in the pull requests. We are waiting&hellip;</p>
]]></content>
  </entry>
  
</feed>
